# مشروع استخلاص محصول الأرز باستخدام بيانات Sentinel-2 ونماذج Time Series متعددة

## ⚙️ المرحلة 1: تجهيز البيانات
### تحميل صور Sentinel-2
- تأكد من أنك تملك صورًا متعددة لتواريخ مختلفة تغطي موسم زراعة الأرز.
- القنوات المطلوبة:
  - B2 (Blue)
  - B3 (Green)
  - B4 (Red)
  - B5 (Red Edge)
  - B8 (NIR)
  - B11 (SWIR)

### تحميل نقاط الحقول
- استخدم ملف Shapefile يحتوي على نقاط الأرز المؤكدة.
- تأكد من أن الإحداثيات متوافقة مع CRS للصور.

---

## 🧮 المرحلة 2: حساب المؤشرات الطيفية
### المؤشرات المستخدمة:
| المؤشر | الاسم الكامل | المعادلة | القنوات |
|--------|---------------|----------|---------|
| NDVI | Normalized Difference Vegetation Index | (B8 - B4) / (B8 + B4) | B8, B4 |
| LSWI | Land Surface Water Index | (B8 - B11) / (B8 + B11) | B8, B11 |
| NDWI | Normalized Difference Water Index | (B3 - B8) / (B3 + B8) | B3, B8 |
| EVI | Enhanced Vegetation Index | 2.5 × (B8 - B4) / (B8 + 6×B4 - 7.5×B2 + 1) | B8, B4, B2 |
| SAVI | Soil Adjusted Vegetation Index | ((B8 - B4) / (B8 + B4 + 0.5)) × 1.5 | B8, B4 |
| NDRE | Normalized Difference Red Edge | (B8 - B5) / (B8 + B5) | B8, B5 |
| GCI | Green Chlorophyll Index | (B8 / B3) - 1 | B8, B3 |
| MSAVI | Modified SAVI | (2*B8 + 1 - sqrt((2*B8 + 1)^2 - 8*(B8 - B4))) / 2 | B8, B4 |
| NDBI | Normalized Difference Built-up Index | (B11 - B8) / (B11 + B8) | B11, B8 |

### كود الحساب:
- لكل صورة، يتم فتح القنوات المطلوبة وحساب كل مؤشر على حدة.
- تُحفظ النتائج كصور GeoTIFF في مجلد `processed/`.

---

## 🧪 المرحلة 3: استخراج القيم عند النقاط
- لكل نقطة، يتم استخراج قيم المؤشرات لكل تاريخ.
- يتم بناء مصفوفة [نقطة × مؤشر × تاريخ]
- تُحفظ في ملف CSV.

---

## 📈 المرحلة 4: بناء قاعدة بيانات Time Series
- تحويل القيم المستخرجة إلى:
  - `X` ← مصفوفة [نقطة × تاريخ × مؤشرات]
  - `y` ← مصفوفة التصنيفات (0 = غير أرز، 1 = أرز)
- تُحفظ في ملفات `.npy`

---

## 🤖 المرحلة 5: تدريب النماذج

### ✅ النماذج المستخدمة:
1. LSTM
2. GRU
3. 1D-CNN
4. 2D-CNN
5. BiLSTM
6. Transformer (بناء مبسط)
7. XGBoost (بعد تحويل البيانات إلى Tabular)

### ⚙️ ملفات التدريب:
- `train_lstm.py`
- `train_gru.py`
- `train_cnn1d.py`
- `train_cnn2d.py`
- `train_bilstm.py`
- `train_transformer.py`
- `train_xgboost.py`

### ⚠️ ملاحظات:
- يتم تحويل X من [عينات × تواريخ × مؤشرات] إلى [عينات × (تواريخ × مؤشرات)] لـ XGBoost.
- كل نموذج في سكربت منفصل مع حفظ النموذج `.h5` أو `.json` حسب الحاجة.

---

## 🧪 المرحلة 6: تقييم النماذج
- حساب:
  - الدقة (Accuracy)
  - F1-score
  - مصفوفة الالتباس
- مقارنة بين النماذج في الأداء.

---

## 💾 المرحلة 7: الحفظ والتصدير
- حفظ جميع النماذج.
- حفظ `X`, `y`.
- توليد تقرير أداء.

---

## 📦 المرحلة 8 (اختياري): التنبؤ على صور جديدة
- تحميل صورة جديدة
- حساب نفس المؤشرات عليها
- استخراج القيم عند نقاط جديدة أو صورة كاملة
- تمريرها للنموذج المختار والتصنيف

---

## 📁 هيكل المشروع
```
rice_timeseries_project/
├── data/
│   ├── rice_points.shp
│   ├── sentinel_raw/
│   └── processed/
├── models/
│   ├── lstm.h5
│   ├── gru.h5
│   ├── cnn1d.h5
│   ├── cnn2d.h5
│   ├── bilstm.h5
│   ├── transformer_model.h5
│   ├── xgboost_model.json
├── output/
│   ├── X_timeseries.npy
│   └── y_labels.npy
├── scripts/
│   ├── preprocess_indicators.py
│   ├── extract_point_values.py
│   ├── build_dataset.py
│   ├── train_lstm.py
│   ├── train_gru.py
│   ├── train_cnn1d.py
│   ├── train_cnn2d.py
│   ├── train_bilstm.py
│   ├── train_transformer.py
│   ├── train_xgboost.py
├── requirements.txt
├── README.md
└── .gitignore
```
